import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import type { EstimateItem, Currency } from '@shared/schema';

export const generateEstimatePdf = async (
  element: HTMLElement,
  estimateItems: EstimateItem[],
  currency: Currency,
  currencyRate: number
) => {
  try {
    // Create a new PDF document
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Add a white background
    pdf.setFillColor(255, 255, 255);
    pdf.rect(0, 0, pageWidth, pageHeight, 'F');

  // Add logo and header
  pdf.setFontSize(22);
  pdf.setTextColor(30, 58, 138); // Navy blue
  pdf.setFont('helvetica', 'bold');
  pdf.text('IT Services Estimate', pageWidth / 2, 30, { align: 'center' });

  // Add estimate details
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Estimate #: EST-${Date.now().toString().slice(-6)}`, 20, 50);
  pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, 60);
  
  const currencySymbols = { USD: '$', EUR: '€', GBP: '£', INR: '₹' };
  pdf.text(`Currency: ${currencySymbols[currency] || currency}`, 20, 70);

  // Add a line
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 80, pageWidth - 20, 80);

  // Add items table
  let currentY = 90;
  const startY = 90;

  // Table header
  pdf.setFillColor(249, 250, 251);
  pdf.rect(20, currentY, pageWidth - 40, 10, 'F');
  pdf.setFont('helvetica', 'bold');
  pdf.text('Description', 25, currentY + 7);
  pdf.text('Qty', 150, currentY + 7, { align: 'right' });
  pdf.text('Unit Price', 170, currentY + 7, { align: 'right' });
  pdf.text('Total', 190, currentY + 7, { align: 'right' });
  
  currentY += 10;

  // Table rows
  pdf.setFont('helvetica', 'normal');
  
  const formatCurrency = (amount: number) => {
    const convertedAmount = amount * currencyRate;
    return `${currencySymbols[currency] || currency} ${convertedAmount.toLocaleString(undefined, { 
      minimumFractionDigits: 0, 
      maximumFractionDigits: 0 
    })}`;
  };

  const calculateServiceCost = (item: EstimateItem) => {
    const baseCost = item.service.baseCostUSD * item.service.scaleMultipliers[item.configuration.projectSize];
    const addOnsCost = item.service.addOns
      .filter(addon => item.configuration.selectedAddOns.includes(addon.name))
      .reduce((sum, addon) => sum + addon.costUSD, 0);
    return baseCost + addOnsCost;
  };

  for (const item of estimateItems) {
    if (currentY > pageHeight - 40) {
      pdf.addPage();
      currentY = 30;
    }
    
    const cost = calculateServiceCost(item);
    const formattedCost = formatCurrency(cost);
    
    pdf.text(item.service.name, 25, currentY + 7);
    pdf.text('1', 150, currentY + 7, { align: 'right' });
    pdf.text(formattedCost, 170, currentY + 7, { align: 'right' });
    pdf.text(formattedCost, 190, currentY + 7, { align: 'right' });
    
    currentY += 10;
  }

  // Calculate totals
  const subtotal = estimateItems.reduce((sum, item) => sum + calculateServiceCost(item), 0);
  const tax = subtotal * 0.18; // 18% tax
  const total = subtotal + tax;

  // Add totals
  currentY += 10;
  pdf.setFont('helvetica', 'bold');
  pdf.text('Subtotal:', 150, currentY, { align: 'right' });
  pdf.text(formatCurrency(subtotal), 190, currentY, { align: 'right' });

  currentY += 10;
  pdf.text('Tax (18%):', 150, currentY, { align: 'right' });
  pdf.text(formatCurrency(tax), 190, currentY, { align: 'right' });

  currentY += 10;
  pdf.setFontSize(14);
  pdf.text('Total:', 150, currentY, { align: 'right' });
  pdf.text(formatCurrency(total), 190, currentY, { align: 'right' });

  // Add footer
  currentY = pageHeight - 30;
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text(
    'Thank you for your business!',
    pageWidth / 2,
    currentY,
    { align: 'center' }
  );
  pdf.text(
    'Generated by IT Services Cost Estimator',
    pageWidth / 2,
    currentY + 10,
    { align: 'center' }
  );

  // Save the PDF
  pdf.save(`IT-Services-Estimate-${new Date().toISOString().split('T')[0]}.pdf`);
  return true;
} catch (error) {
  console.error('Error generating PDF:', error);
  return false;
}
};
