import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

type EstimateItem = {
  id: string;
  name: string;
  description: string;
  quantity: number;
  unitPrice: number;
  total: number;
};

type Currency = {
  code: string;
  symbol: string;
  name: string;
};

type EstimateData = {
  items: EstimateItem[];
  subtotal: number;
  tax: number;
  total: number;
  currency: string | Currency;
  date: string;
  estimateNumber: string;
};

export const generateEstimatePdf = async (
  element: HTMLElement,
  estimateData: EstimateData,
  fileName: string = 'IT-Services-Estimate'
) => {
  try {
    // Create a new PDF document
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Add a white background
    pdf.setFillColor(255, 255, 255);
    pdf.rect(0, 0, pageWidth, pageHeight, 'F');

    // Add logo and header
    pdf.setFontSize(22);
    pdf.setTextColor(30, 58, 138); // Navy blue
    pdf.setFont('helvetica', 'bold');
    pdf.text('IT Services Estimate', pageWidth / 2, 30, { align: 'center' });

    // Add estimate details
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Estimate #: ${estimateData.estimateNumber}`, 20, 50);
    pdf.text(`Date: ${estimateData.date}`, 20, 60);
    const currencySymbol = typeof estimateData.currency === 'string' 
      ? estimateData.currency 
      : estimateData.currency.symbol;
    pdf.text(`Currency: ${currencySymbol}`, 20, 70);

    // Add a line
    pdf.setDrawColor(200, 200, 200);
    pdf.line(20, 80, pageWidth - 20, 80);

    // Add items table
    const startY = 90;
    let currentY = startY;

    // Table header
    pdf.setFillColor(249, 250, 251);
    pdf.rect(20, currentY, pageWidth - 40, 10, 'F');
    pdf.setFont('helvetica', 'bold');
    pdf.text('Description', 25, currentY + 7);
    pdf.text('Qty', 150, currentY + 7, { align: 'right' });
    pdf.text('Unit Price', 170, currentY + 7, { align: 'right' });
    pdf.text('Total', 190, currentY + 7, { align: 'right' });
    
    currentY += 10;

    // Table rows
    pdf.setFont('helvetica', 'normal');
    estimateData.items.forEach((item, index) => {
      if (currentY > pageHeight - 40) {
        pdf.addPage();
        currentY = 30;
      }
      
      pdf.text(item.name, 25, currentY + 7);
      pdf.text(item.quantity.toString(), 150, currentY + 7, { align: 'right' });
      pdf.text(
        `${currencySymbol} ${item.unitPrice.toFixed(2)}`,
        170,
        currentY + 7,
        { align: 'right' }
      );
      pdf.text(
        `${currencySymbol} ${item.total.toFixed(2)}`,
        190,
        currentY + 7,
        { align: 'right' }
      );
      
      currentY += 10;
    });

    // Add totals
    currentY += 10;
    pdf.setFont('helvetica', 'bold');
    pdf.text('Subtotal:', 150, currentY, { align: 'right' });
    pdf.text(
      `${currencySymbol} ${estimateData.subtotal.toFixed(2)}`,
      190,
      currentY,
      { align: 'right' }
    );

    currentY += 10;
    pdf.text('Tax (10%):', 150, currentY, { align: 'right' });
    pdf.text(
      `${currencySymbol} ${estimateData.tax.toFixed(2)}`,
      190,
      currentY,
      { align: 'right' }
    );

    currentY += 10;
    pdf.setFontSize(14);
    pdf.text('Total:', 150, currentY, { align: 'right' });
    pdf.text(
      `${currencySymbol} ${estimateData.total.toFixed(2)}`,
      190,
      currentY,
      { align: 'right' }
    );

    // Add footer
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(
      'Thank you for your business!',
      pageWidth / 2,
      pageHeight - 20,
      { align: 'center' }
    );
    pdf.text(
      'Generated by IT Services Cost Estimator',
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );

    // Save the PDF
    pdf.save(`${fileName}.pdf`);
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};

// Helper function to format date
export const formatDate = (date: Date = new Date()): string => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Helper function to generate a random estimate number
export const generateEstimateNumber = (): string => {
  const prefix = 'EST';
  const randomNum = Math.floor(10000 + Math.random() * 90000);
  return `${prefix}-${randomNum}`;
};
